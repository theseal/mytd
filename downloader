#!/usr/bin/env python3

from contextlib import suppress
from os.path import exists
from persistqueue import FIFOSQLiteQueue
from urllib.parse import urlparse, parse_qs
import feedparser
import logging
import logging
import mmap
import os
import re
import telebot
import threading
import time
import yt_dlp


def download():
    while True:
        items = q.get()
        url = items.pop(0)
        message = None
        if items:
            message = items.pop(0)

        logging.info(f"download    : processing {url}")
        archive_file = f"{conf_dir}/download-archive"
        ydl_opts = {
            "download_archive": archive_file,
            "ignoreerrors": True,
            "writesubtitles": True,
            "writeautomaticsub": True,
            "subtitleslangs": ["sv.*", "en.*"],
            "writethumbnail": True,
            "outtmpl": f"{data_dir}/S01E%(upload_date)s - %(uploader)s - %(title)s [%(id)s].%(ext)s",
            # "verbose": True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            if info:
                text = "Hemladdat üìºüè¥‚Äç‚ò†Ô∏è"
                if message:
                    bot.reply_to(message, text)
                else:
                    bot.send_message(CHAT_ID, f"{text}: {url}")
            else:
                if message:
                    text = "Troligen nerladdat tidigare ü§∑‚Äç‚ôÇÔ∏è"
                    bot.reply_to(message, text)

        q.task_done()


def rss():
    while True:
        logging.info("RSS    : starting to fetch feeds")
        channels = open(f"{conf_dir}/channel-file", "r")
        for channel in channels:
            logging.info(f"RSS    : processing channel {channel}")
            url = f"https://www.youtube.com/feeds/videos.xml?channel_id={channel}"
            try:
                feed = feedparser.parse(url)
            except:
                logging.info(f"rss    : feed error")
                time.sleep(30)
                continue

            for post in feed.entries:
                if re.search('/shorts/',post.link):
                    logging.info(
                        f"RSS    : Skipping Shorts ({post.link})"
                    )
                    continue

                video_id = get_yt_id(post.link)
                if video_id:
                    if check_string_in_file(f"{conf_dir}/download-archive", video_id):
                        logging.info(
                            f"RSS    : Skipping entry for video with id ({video_id}) since already in archive"
                        )
                        continue

                q.put([post.link])

            time.sleep(30)

        channels.close

        logging.info("RSS    : sleeping for one hour")
        time.sleep(3600)


def telegram():
    logging.info(f"telegram    : Starting telegram bot")

    @bot.message_handler(commands=["start", "help"])
    def send_welcome(message):
        bot.reply_to(
            message, f"Configure the following ID server-side: {message.chat.id}"
        )

    @bot.message_handler(regexp=r'^(https?://[^\s]+)')
    def handle_http_message(message):
        if message.chat.id != CHAT_ID:
            logging.info(f"telegram    : discarding message from {message.chat.id}")
            return

        url = message.text
        q.put([url, message])
        logging.info(f"telegram    : processing message with url: {url}")
        reply_text = "K√∂at üëç"
        bot.reply_to(message, reply_text)

    @bot.message_handler(func=lambda message: True)
    def catch_all(message):
        logging.info(f"telegram    : discarding message with invalid message")
        return

    bot.infinity_polling()


# From StackOverflow: https://stackoverflow.com/a/54383711
# noinspection PyTypeChecker
def get_yt_id(url, ignore_playlist=False):
    # Examples:
    # - http://youtu.be/SA2iWivDJiE
    # - http://www.youtube.com/watch?v=_oPAwA_Udwc&feature=feedu
    # - http://www.youtube.com/embed/SA2iWivDJiE
    # - http://www.youtube.com/v/SA2iWivDJiE?version=3&amp;hl=en_US
    query = urlparse(url)
    if query.hostname == "youtu.be":
        return query.path[1:]
    if query.hostname in {"www.youtube.com", "youtube.com", "music.youtube.com"}:
        if not ignore_playlist:
            # use case: get playlist id not current video in playlist
            with suppress(KeyError):
                return parse_qs(query.query)["list"][0]
        if query.path == "/watch":
            return parse_qs(query.query)["v"][0]
        if query.path[:7] == "/watch/":
            return query.path.split("/")[1]
        if query.path[:7] == "/embed/":
            return query.path.split("/")[2]
        if query.path[:3] == "/v/":
            return query.path.split("/")[2]


# returns None for invalid YouTube url


def check_string_in_file(file, pattern):
    if exists(file) == None:
        return None

    with open(file, "rb", 0) as file:
        s = mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ)
        if s.find(bytes(pattern, "utf-8")) != -1:
            return True


if __name__ == "__main__":
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")

    CHAT_ID = int(os.environ["CHAT_ID"])
    TOKEN = os.environ["TOKEN"]

    bot = telebot.TeleBot(TOKEN, parse_mode=None)
    q = FIFOSQLiteQueue(path="./config/queue", multithreading=True, auto_commit=False)

    conf_dir=os.getenv("CONFIG_DIR", "/config")
    data_dir=os.getenv("DATA_DIR", "/data")

    x = threading.Thread(target=rss)
    y = threading.Thread(target=telegram)
    z = threading.Thread(target=download)

    x.start()
    y.start()
    z.start()

# For testing
# URL = "https://www.youtube.com/watch?v=BaW_jenozKc"
# URL = 'https://www.youtube.com/watch?v=PEHoaB6X3cs'
# URL = 'https://vimeo.com/731378604'

# download(URL)
