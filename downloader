#!/usr/bin/env python3

import feedparser
import json
import logging
import logging
import os
import re
import requests
import sys
import threading
import time
import yt_dlp


def notify(message, reference=None):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={CHAT_ID}&text={message}&allow_sending_without_reply=True"
    if reference:
        url += f"&reply_to_message_id={reference}"
    try:
        r = requests.get(url)
    except:
        logging.info(f"notify    : API failure - no message at this time")


def download(url):
    logging.info(f"download    : processing {url}")
    ydl_opts = {
        "download_archive": "/config/download-archive",
        "ignoreerrors": True,
        "writesubtitles": True,
        "writeautomaticsub": True,
        "subtitleslangs": ["sv.*", "en.*"],
        "writethumbnail": True,
        "outtmpl": "/data/%(uploader)s/%(timestamp)s/S01E%(upload_date)s - %(uploader)s - %(title)s [%(id)s].%(ext)s",
        # "verbose": True,
    }
    uploader = "NA"
    title = "NA"
    result = dict()

    download_boolean = False
    # first iteration is to check status of content
    for count in range(2):
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=download_boolean)
            info = ydl.sanitize_info(info)
            if info:
                uploader = info["uploader"]
                title = info["title"]
                if download_boolean == False:
                    for f in reversed(info["formats"]):
                        resolution = f["resolution"]
                        if resolution == "audio only":
                            continue
                        res = f["resolution"].split("x")
                        height = int(res[1])

                        # Only download content better then 720p. Seems like it sometimes take a
                        # while before youtube serves crisp content.
                        if height >= 1080:
                            download_boolean = True
                            break

    result["uploader"] = uploader
    result["title"] = title

    return result


def rss():
    while True:
        logging.info("RSS    : starting to fetch feeds")
        channels = open("/config/channel-file", "r")
        for channel in channels:
            logging.info(f"RSS    : processing {channel}")
            url = f"https://www.youtube.com/feeds/videos.xml?channel_id={channel}"
            try:
                feed = feedparser.parse(url)
            except:
                logging.info(f"rss    : feed error")
                time.sleep(30)
                continue

            for post in feed.entries:
                download(post.link)

            time.sleep(30)

        channels.close

        logging.info("RSS    : sleeping for one hour")
        time.sleep(3600)


def telegram():
    offset = 0

    while True:
        logging.info(f"telegram    : fetching messages")
        offset += 1
        url = f"https://api.telegram.org/bot{TOKEN}/getUpdates?offset={offset}"

        try:
            r = requests.get(url)
        except:
            logging.info(f"telegram    : API failure - sleeping for 10 min")
            time.sleep(300)

        data = r.json()
        if not data["result"]:
            time.sleep(60)

        for result in data["result"]:
            offset = result["update_id"]
            from_id = result["message"]["from"]["id"]
            # Only allow me
            if from_id != CHAT_ID:
                logging.info(f"telegram    : discarding message from {from_id}")
                continue
            text = result["message"]["text"]
            message_id = result["message"]["message_id"]

            if m := re.match("^(https?://[^\s]+)", text):
                url = m.group(1)
            else:
                logging.info(f"telegram    : discarding message with invalid message")
                continue

            logging.info(f"telegram    : processing message with url: {url}")
            message = "K√∂at üëç"
            notify(message=message, reference=message_id)

            download(url)
            message = "Hemladdat üìºüè¥‚Äç‚ò†Ô∏è"
            notify(message=message, reference=message_id)


if __name__ == "__main__":
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")

    CHAT_ID = int(os.environ["CHAT_ID"])
    TOKEN = os.environ["TOKEN"]

    x = threading.Thread(target=rss)
    y = threading.Thread(target=telegram)
    x.start()
    y.start()

# For testing
# URL = "https://www.youtube.com/watch?v=BaW_jenozKc"
# URL = 'https://www.youtube.com/watch?v=PEHoaB6X3cs'
# URL = 'https://vimeo.com/731378604'
# download(URL)
